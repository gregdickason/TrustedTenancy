// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  role          UserRole  @default(TENANT)
  emailVerified DateTime?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Auth
  accounts Account[]
  sessions Session[]

  // Properties (for landlords)
  properties Property[]
  
  // Inquiries (for tenants)
  inquiries Inquiry[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Property {
  id          String   @id @default(cuid())
  title       String
  description String?
  address     String
  suburb      String
  state       String
  postcode    String
  country     String   @default("Australia")
  
  // Property details
  bedrooms    Int
  bathrooms   Int
  parking     Int?
  propertyType PropertyType
  rentAmount  Int      // Monthly rent in cents
  availableFrom DateTime?
  
  // Property features
  features    String[] // Array of features like "Air conditioning", "Pool", etc.
  
  // Landlord
  landlordId  String
  landlord    User     @relation(fields: [landlordId], references: [id], onDelete: Cascade)
  
  // Status
  status      PropertyStatus @default(ACTIVE)
  
  // Images
  images      PropertyImage[]
  
  // Inquiries
  inquiries   Inquiry[]
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("properties")
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  altText    String?
  isPrimary  Boolean  @default(false)
  propertyId String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@map("property_images")
}

model Inquiry {
  id         String        @id @default(cuid())
  message    String
  tenantId   String
  tenant     User          @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  propertyId String
  property   Property      @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  status     InquiryStatus @default(PENDING)
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt

  @@map("inquiries")
}

enum UserRole {
  TENANT
  LANDLORD
  ADMIN
}

enum PropertyType {
  HOUSE
  APARTMENT
  TOWNHOUSE
  STUDIO
  ROOM
  OTHER
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
  RENTED
  DRAFT
}

enum InquiryStatus {
  PENDING
  RESPONDED
  CLOSED
}